{
  "name": "ts-sample",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "debug": "nodemon",
    "build": "npx tsc",
    "build:all": "run-s aspida prisma build",
    "start": "node dist/index.js",
    "test": "jest --runInBand --forceExit --detectOpenHandles",
    "tsnode": "run-s tsnode:config \"tsnode:run {1}\" --",
    "tsnode:run": "npx ts-node --project tsconfig.tsnode.json --require dotenv/config",
    "tsnode:config": "run-s tsnode:_config tsnode:prettier",
    "tsnode:_config": "npx tsc --showConfig > tsconfig.tsnode.json",
    "tsnode:prettier": "npx prettier --write tsconfig.tsnode.json",
    "lint": "run-s lint:eslint lint:prettier lint:hadolint lint:openapi",
    "lint:eslint": "npx eslint ./src",
    "lint:prettier": "npx prettier --check .",
    "lint:hadolint": "hadolint Dockerfile",
    "lint:openapi": "npx spectral lint openapi/openapi.yaml",
    "db:up": "docker compose up db -d",
    "db:up-ci": "docker compose up db -d --wait",
    "db:down": "docker compose rm -fsv db",
    "db:login": "docker exec -it ts-sample-db mysql -uprisma -ppassword -D sample",
    "db:dump": "docker exec ts-sample-db sh -c 'exec mysqldump -uroot -p\"$MYSQL_ROOT_PASSWORD\" --databases sample' > ./docker/db/docker-entrypoint-initdb.d/init_data.sql",
    "db:restore": "docker exec -i ts-sample-db sh -c 'exec mysql -uroot -p\"$MYSQL_ROOT_PASSWORD\"' < ./docker/db/docker-entrypoint-initdb.d/init_data.sql",
    "db:_clean": "docker volume rm typescript-backend-sample_db-data",
    "db:clean": "run-s db:down db:_clean",
    "db:cleanup": "run-s db:clean db:up-ci",
    "prisma": "npx prisma generate",
    "prisma:migrate": "npx prisma migrate dev",
    "prisma:studio": "npx prisma studio",
    "docker:build": "docker compose build app",
    "docker:up": "docker compose up -d",
    "docker:down": "docker compose down",
    "docker:cleanup": "run-s docker:down docker:build db:clean docker:up",
    "aspida": "run-s aspida:clean aspida:gen",
    "aspida:gen": "npx openapi2aspida -i=./openapi/openapi.yaml -o=./src/types/aspida",
    "aspida:clean": "rm -rf ./src/types/aspida"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@stoplight/spectral-cli": "^6.11.0",
    "@tsconfig/node20": "^20.1.2",
    "@tsconfig/strictest": "^2.0.2",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/jest": "^29.5.11",
    "@types/node": "^20.10.4",
    "@typescript-eslint/eslint-plugin": "^6.14.0",
    "@typescript-eslint/parser": "^6.14.0",
    "dotenv": "^16.3.1",
    "eslint": "^8.55.0",
    "eslint-config-prettier": "^9.1.0",
    "jest": "^29.7.0",
    "nodemon": "^3.0.2",
    "npm-run-all": "^4.1.5",
    "openapi2aspida": "^0.23.2",
    "pino-pretty": "^10.3.1",
    "prettier": "^3.1.1",
    "prisma": "^5.8.0",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "@myrotvorets/express-async-middleware-wrapper": "^2.2.0",
    "@prisma/client": "^5.8.0",
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "express-openapi-validator": "^5.1.3",
    "pino": "^8.17.2",
    "pino-http": "^9.0.0",
    "zod": "^3.22.4",
    "zod-prisma-types": "^3.1.6"
  }
}
